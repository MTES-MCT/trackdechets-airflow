events{}
http{

  upstream airflow {
      # TO CHANGE WITH RIGHT DNS SERVER
      server 0b5804ed-1670-46db-b6f3-8a562684518b.pub.instances.scw.cloud:8080 weight=1 fail_timeout=300s;
  }


  server {
    listen 80;
    listen [::]:80;
     
    # TO CHANGE WITH RIGHT DNS SERVER
    server_name 0b5804ed-1670-46db-b6f3-8a562684518b.pub.instances.scw.cloud;

    # Strict Transport Security
    add_header Strict-Transport-Security max-age=2592000;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # #Uncomment this section after certificates creation
    # location / {
    #     return 301 https://$host$request_uri;
    # }    
  }

  # #Uncomment this section after certificates creation
  # server {
  #   listen 443 ssl;
  #   listen [::]:443 ssl ipv6only=on;
   
  #   # TO CHANGE WITH RIGHT DNS SERVER
  #   server_name 0b5804ed-1670-46db-b6f3-8a562684518b.pub.instances.scw.cloud;

  #   proxy_read_timeout 720s;
  #   proxy_connect_timeout 720s;
  #   proxy_send_timeout 720s;
    
  #   # TO CHANGE WITH PATH TO SSL FILES
  #   ssl_certificate /etc/letsencrypt/live/0b5804ed-1670-46db-b6f3/fullchain.pem;
  #   ssl_certificate_key /etc/letsencrypt/live/0b5804ed-1670-46db-b6f3/privkey.pem;

  #   ssl_session_timeout 30m;
  #   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  #   ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
  #   ssl_prefer_server_ciphers on;

  #   proxy_set_header X-Forwarded-Host $host;
  #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #   proxy_set_header X-Forwarded-Proto $scheme;
  #   proxy_set_header X-Real-IP $remote_addr;


  #   location / {
  #       proxy_pass    http://airflow;
  #       # force timeouts if the backend dies
  #       proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;

  #       # set headers
  #       proxy_set_header Host $host;
  #       proxy_set_header X-Real-IP $remote_addr;
  #       proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;

  #       # Let the OpenERP web service know that we're using HTTPS, otherwise
  #       # it will generate URL using http:// and not https://
  #       proxy_set_header X-Forwarded-Proto https;

  #       # by default, do not forward anything
  #       proxy_redirect off;
  #   }
  # }

}